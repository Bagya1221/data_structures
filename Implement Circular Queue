#include <stdio.h>
#include <stdlib.h>
#define MAX 5
typedef struct {
    int front, rear, size;
    int items[MAX];
} CircularQueue;
void initQueue(CircularQueue* q) {
    q->front = q->rear = -1;
    q->size = 0;
}
int isEmpty(CircularQueue* q) { return q->size == 0; }
int isFull(CircularQueue* q) { return q->size == MAX; }

void enqueue(CircularQueue* q, int item) {
    if (isFull(q)) { printf("Queue full!\n"); return; }
    q->rear = (q->rear + 1) % MAX;
    q->items[q->rear] = item;
    if (isEmpty(q)) q->front = q->rear;
    q->size++;
}
int dequeue(CircularQueue* q) {
    if (isEmpty(q)) { printf("Queue empty!\n"); return -1; }
    int item = q->items[q->front];
    q->front = (q->front + 1) % MAX;
    q->size--;
    return item;
}
void display(CircularQueue* q) {
    if (isEmpty(q)) { printf("Queue empty!\n"); return; }
    for (int i = 0, idx = q->front; i < q->size; i++) {
        printf("%d ", q->items[idx]);
        idx = (idx + 1) % MAX;
    }
    printf("\n");
}
int main() {
    CircularQueue q;
    initQueue(&q);
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    enqueue(&q, 40);
    enqueue(&q, 50);
    printf("Queue: ");
    display(&q);
    printf("Dequeued: %d\n", dequeue(&q));
    enqueue(&q, 60);
    printf("Queue: ");
    display(&q);
    return 0;
}
