#include <stdio.h>
#include <stdlib.h>
typedef struct Node {
    int data;
    struct Node *next;
} Node;
void printList(Node *head) {
    while (head) {
        printf("%d->", head->data);
        head = head->next;
    }
    printf("NULL\n");
}
int main() {
    Node *head = (Node *)malloc(sizeof(Node));
    head->data = 22;
    head->next = (Node *)malloc(sizeof(Node));
    head->next->data = 77;
    head->next->next = (Node *)malloc(sizeof(Node));
    head->next->next->data = 99;
    head->next->next->next = (Node *)malloc(sizeof(Node));
    head->next->next->next->data = 22;
    head->next->next->next->next = (Node *)malloc(sizeof(Node));
    head->next->next->next->next->data = 55;
    head->next->next->next->next->next = (Node *)malloc(sizeof(Node));
    head->next->next->next->next->next->data = 77;
    head->next->next->next->next->next->next = NULL;
    printf("Original list:\n");
    printList(head);
    int position = 4;
    Node *temp = head;
    Node *prev = NULL;
    for (int i = 1; i < position && temp != NULL; i++) {
        prev = temp;
        temp = temp->next;
    }
    if (temp != NULL) {
        if (prev != NULL) {
            prev->next = temp->next; 
        } else {
            head = temp->next; 
        }
        free(temp);
    } else {
        printf("Position out of bounds.\n");
    }
    printf("Updated list:\n");
    printList(head);
    while (head) {
        temp = head;
        head = head->next;
        free(temp);
    }

    return 0;
}
