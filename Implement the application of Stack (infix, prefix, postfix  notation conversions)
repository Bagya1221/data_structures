#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#define MAX 100
typedef struct {
    int top;
    char items[MAX];
} Stack;
void push(Stack* s, char c) { if (s->top < MAX - 1) s->items[++s->top] = c; }
char pop(Stack* s) { return s->top == -1 ? '\0' : s->items[s->top--]; }
char peek(Stack* s) { return s->top == -1 ? '\0' : s->items[s->top]; }
int isEmpty(Stack* s) { return s->top == -1; }
int precedence(char op) { return op == '+' || op == '-' ? 1 : (op == '*' || op == '/' ? 2 : (op == '^' ? 3 : 0)); }
void infixToPostfix(const char* infix, char* postfix) {
    Stack s = { .top = -1 };
    int k = 0;
    for (int i = 0; infix[i]; i++) {
        if (isalnum(infix[i])) postfix[k++] = infix[i];
        else if (infix[i] == '(') push(&s, infix[i]);
        else if (infix[i] == ')') {
            while (!isEmpty(&s) && peek(&s) != '(') postfix[k++] = pop(&s);
            pop(&s);
        } else {
            while (!isEmpty(&s) && precedence(peek(&s)) >= precedence(infix[i])) postfix[k++] = pop(&s);
            push(&s, infix[i]);
        }
    }
    while (!isEmpty(&s)) postfix[k++] = pop(&s);
    postfix[k] = '\0';
}
void reverseString(char* str) {
    int len = strlen(str);
    for (int i = 0; i < len / 2; i++) {
        char temp = str[i];
        str[i] = str[len - i - 1];
        str[len - i - 1] = temp;
    }
}

void infixToPrefix(const char* infix, char* prefix) {
    char reversed[MAX], temp[MAX];
    strcpy(reversed, infix);
    reverseString(reversed);
    for (int i = 0; reversed[i]; i++) reversed[i] = reversed[i] == '(' ? ')' : (reversed[i] == ')' ? '(' : reversed[i]);
    infixToPostfix(reversed, temp);
    reverseString(temp);
    strcpy(prefix, temp);
}
int main() {
    char infix[MAX], postfix[MAX], prefix[MAX];
    printf("Enter infix expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strcspn(infix, "\n")] = '\0';
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    infixToPrefix(infix, prefix);
    printf("Prefix expression: %s\n", prefix);
    return 0;
}
